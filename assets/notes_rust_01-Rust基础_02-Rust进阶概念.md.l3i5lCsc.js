import{_ as k}from"./chunks/ArticleMetadata.XiIDxwuR.js";import{_ as p,p as e,a as r,v as d,C as g,e as l,y as A,f as y,o as n,q as D,s as F}from"./chunks/framework.x10tvMrD.js";import"./chunks/theme.MKUFgKjT.js";import"./chunks/index.km_fhrhL.js";const C="/assets/1.v9NBkRAL.png",o="/assets/2.MQRTsleq.png",c="/assets/yinyong.BgkgePN1.svg",P=JSON.parse('{"title":"Rust进阶概念","description":"","frontmatter":{"title":"Rust进阶概念","aside":true,"editLink":false,"lastUpdated":false,"showComment":false,"showDate":false,"date":"2023-12-03T13:34:12.000Z"},"headers":[],"relativePath":"notes/rust/01-Rust基础/02-Rust进阶概念.md","filePath":"notes/rust/01-Rust基础/02-Rust进阶概念.md","lastUpdated":1706692809000}'),B={name:"notes/rust/01-Rust基础/02-Rust进阶概念.md"},u=l("h1",{id:"rust-进阶",tabindex:"-1"},[A("Rust 进阶 "),l("a",{class:"header-anchor",href:"#rust-进阶","aria-label":'Permalink to "Rust 进阶"'},"​")],-1),E=y(`<h2 id="所有权" tabindex="-1">所有权 <a class="header-anchor" href="#所有权" aria-label="Permalink to &quot;所有权&quot;">​</a></h2><ul><li>所有权是 Rust 最独特的特性，无需垃圾回收（garbage collector）就保证内存安全</li><li>Rust 的核心特性就是所有权</li><li>所有程序在运行时都必须管理它们使用计算机内存的方式 <ul><li>有些语言有垃圾收集机制，在程序运行时，它们会不断寻找不再使用的内存（C#、Java）</li><li>在其他语言中，程序员必须显式的分配和释放内存（C、C++）</li></ul></li><li>Rust 采用了第三种方式 <ul><li>内存是通过一个所有权系统来管理的，通过所有权系统管理堆存，其中包含一组编译器在编译时检查的规则，编译器在编译时会根据一系列的规则进行检查</li><li>当程序运行时，所有权特性不会减慢程序的运行速度（因为都在编译期完成了）</li></ul></li><li>所有权以及相关功能： <ul><li>借用（borrowing）</li><li>slice</li><li>Rust 如何在内存中布局数据</li></ul></li><li>所有权规则 <ul><li>Rust 中的每一个值都有一个 所有者（owner）。</li><li>值在任一时刻有且只有一个所有者。</li><li>当所有者（变量）离开作用域，这个值将被丢弃。</li></ul></li></ul><h3 id="stack-and-heap-栈内存和堆内存" tabindex="-1">Stack and Heap（栈内存和堆内存） <a class="header-anchor" href="#stack-and-heap-栈内存和堆内存" aria-label="Permalink to &quot;Stack and Heap（栈内存和堆内存）&quot;">​</a></h3><h4 id="存储数据" tabindex="-1">存储数据 <a class="header-anchor" href="#存储数据" aria-label="Permalink to &quot;存储数据&quot;">​</a></h4><ul><li>Stack 会按值的接收顺序来存储，按相反的顺序将它们移除（先进后出，后进先出） <ul><li>添加数据叫做 ”压入栈“</li><li>移除数据叫做 ”弹出栈“</li><li>所有存储在 Stack 上的数据必须拥有已知的固定的大小</li><li>把值压到 Stack 上不叫 ”分配“（因为实际上不需要分配，数据在 Stack 上挨着放就可以了）</li></ul></li><li>Heap 内存组织性差一些 <ul><li>当你把数据放入 Heap 时，你会请求一定数量的空间</li><li>操作系统在 Heap 里找到一块足够大的空间，把它标记为在用，并返回一个指针，也就是这个空间的地址</li><li>这个过程叫做在 Heap 上进行分配，有时仅仅称为 ”分配“</li></ul></li><li>因为指针是已知固定大小的，可以把指针存放在 Stack 上（也就是说，Stack 存储着 Heap 的指针）</li><li>编译时大小未知的数据或运行时大小可能发生变化的数据必须存放在 Heap 上</li><li>如果想要实际的数据，你必须使用指针来定位</li><li>把数据压到 Stack 上要比在 Heap 上分配快得多</li><li>因为（入栈时）操作系统无需为存储新数据去搜索内存空间；其位置总是在栈顶。</li><li>相比之下，在堆上分配内存则需要更多的工作，这是因为操作系统必须首先找到一块足够存放数据的内存空间，并接着做一些记录为下一次分配做准备。</li></ul><h4 id="访问数据" tabindex="-1">访问数据 <a class="header-anchor" href="#访问数据" aria-label="Permalink to &quot;访问数据&quot;">​</a></h4><ul><li>访问 Stack 中的数据要比访问 Heap 中的数据要快-&gt;因为需要通过指针才能找到 Heap 中的数据</li><li>处理器在处理的数据彼此较近的时候（比如在栈上），比较远的时候（比如在堆上）能更快</li></ul><h4 id="函数调用" tabindex="-1">函数调用 <a class="header-anchor" href="#函数调用" aria-label="Permalink to &quot;函数调用&quot;">​</a></h4><ul><li>当你的代码调用函数时，值被传入函数（也包括指向 Heap 的指针）</li><li>函数本地的变量被压到 Stack 上，当函数结束后，这些值会从 Stack 上弹出</li></ul><h3 id="所有权存在的原因" tabindex="-1">所有权存在的原因 <a class="header-anchor" href="#所有权存在的原因" aria-label="Permalink to &quot;所有权存在的原因&quot;">​</a></h3><ul><li>所有权解决的问题 <ul><li>跟踪代码的哪些部分正在使用 Heap 的哪些数据</li><li>最小化 Heap 上的重复数据量</li><li>可以清理 Heap 上未使用的数据以避免空间不足</li></ul></li></ul><h3 id="所有权的规则" tabindex="-1">所有权的规则 <a class="header-anchor" href="#所有权的规则" aria-label="Permalink to &quot;所有权的规则&quot;">​</a></h3><ul><li>每个值都有一个变量，这个变量是该值的所有者</li><li>每个值同时只能有一个所有者</li><li>当所有者超出作用域（scope）时，该值将被删除</li></ul><h4 id="变量作用域-scope" tabindex="-1">变量作用域（Scope） <a class="header-anchor" href="#变量作用域-scope" aria-label="Permalink to &quot;变量作用域（Scope）&quot;">​</a></h4><ul><li>Scope 就是程序中一个有效范围</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//s 不可用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//s 可用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//可以对 s 进行相关操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//s 作用域到此结束，s 不可用</span></span></code></pre></div><h4 id="string-类型" tabindex="-1">String 类型 <a class="header-anchor" href="#string-类型" aria-label="Permalink to &quot;String 类型&quot;">​</a></h4><ul><li>String 类型比那些基础标量数据类型更复杂</li><li>基础数据类型存放在 Stack 上，离开作用域就会弹出栈</li><li>我们现在用一个存储在 Heap 上面的类型，来研究 Rust 是如何回收这些数据的</li><li>String 会在 Heap 上分配，能够存储在编译时未知数量的文本</li></ul><h5 id="创建-string-类型的值" tabindex="-1">创建 String 类型的值 <a class="header-anchor" href="#创建-string-类型的值" aria-label="Permalink to &quot;创建 String 类型的值&quot;">​</a></h5><ul><li>可以使用 from 函数从字符串字面值创建出 String 类型</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><ul><li>::表示 from 是 String 类型下的函数,这类字符串是可以被修改的</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot; word&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h5 id="内存与分配" tabindex="-1">内存与分配 <a class="header-anchor" href="#内存与分配" aria-label="Permalink to &quot;内存与分配&quot;">​</a></h5><ul><li><p>字符串字面值在编译时就知道他的内容了，其文本内容直接被硬编码到最终的可执行文件中</p></li><li><p>速度快、高效，是因为其不可变性</p></li><li><p>String 类型，为了支持可变性，需要在 Heap 上分配内存来保存编译时未知的文本内容</p></li><li><p>操作系统必须在运行时来请求内存</p></li><li><p>通过调用 String::from 实现</p></li><li><p>当用完 String 后，需要用某种方式把内存返还给操作系统</p></li><li><p>这步，在拥有 GC 的语言中，GC 会跟踪并清理不再使用的内存</p></li><li><p>没有 GC，就需要我们去识别内存何时不再使用，并调用代码将内存空间返还</p></li><li><p>如果忘了，那就是浪费内存</p></li><li><p>如果提前做的，变量就会非法</p></li><li><p>如果做了两次，也是 Bug，必须一次分配对应一次释放 =&gt; Rust 采用了不同的方式：</p></li><li><p>对于某个值来说，当拥有它的变量走出范围时，内存会立即自动的交还给操作系统</p></li><li><p>drop 函数，变量走出作用域，Rust 会自动执行这个函数，释放空间</p></li><li><p>变量和数据交互的方式</p><ul><li>移动（Move）</li><li>克隆（Clone）</li></ul></li></ul><h5 id="移动" tabindex="-1">移动 <a class="header-anchor" href="#移动" aria-label="Permalink to &quot;移动&quot;">​</a></h5><ul><li>基本数据类型: <ul><li>多个变量可以使用同一个数据</li><li>整数是已知且固定大小的简单的值，这两个 5 被压到了 Stack 中</li><li>基本数据类型不存在什么 浅拷贝、深拷贝，只有引用类型涉及，因为基本数据类型操作都是在 Stack 上进行的</li></ul></li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x;</span></span></code></pre></div><ul><li>String 类型（或者说用到了 Heap 的类型，也叫引用类型）：</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1;</span></span></code></pre></div><ul><li>一个 String 由 3 部分构成（放在 Stack 中），存放字符串内容的部分在 Heap 上 <ul><li>一个指向存放字符串内容的内存的指针</li><li>一个长度（len：表示存放这个字符串所需的字节数）</li><li>一个容量 （capacity：指 String 从操作系统中总共获得内存的总字节数）</li></ul></li></ul><p><img src="`+C+'" alt=""></p><ul><li><p>当把 s1 赋给 s2，String 的数据被复制了一份：</p></li><li><p>在 Stack 上复制了一份，指针、长度、容量</p></li><li><p>并没有复制指针所指向的 Heap 数据 <img src="'+o+`" alt=""></p></li><li><p>当变量离开作用域时，Rust 会自动调用 drop 函数，并将变量使用的 heap 内存释放</p></li><li><p>当 s1，s2 离开作用域时，它们都会尝试释放相同的内存</p></li><li><p>二次释放（double free）Bug</p></li><li><p>为了保证内存的安全</p><ul><li>Rust 没有尝试复制被分配的内存（Heap 中的存储内容没有被复制）</li><li>Rust 让 s1 失效</li></ul></li><li><p>当 s1 离开作用域的时候，Rust 不需要释放任何东西</p></li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//会报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>这种操作，有点像浅拷贝（复制 Stack 中的索引信息，指向同一个 Heap 内存地址），但是 Rust 后续删除了第一个变量，所以我们叫了一个新名字 移动（Move）</li><li>另外，这里还隐含了一个设计选择：Rust 永远也不会自动创建数据的 深拷贝（在 Stack 中创建新的索引，在 Heap 中创建新空间存储数据，这个新索引，指向新空间，数据是一样的）。因此，任何 自动 的复制可以被认为对运行时性能影响较小（因为都是 Move，没对 Heap 进行操作）。</li></ul><h5 id="克隆-clone" tabindex="-1">克隆（Clone） <a class="header-anchor" href="#克隆-clone" aria-label="Permalink to &quot;克隆（Clone）&quot;">​</a></h5><ul><li>如果想对 Heap 上的 String 数据进行深度拷贝，而不仅仅是 Stack 上的索引数据，可以使用 Clone 方法</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">clone</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}, {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s1, s2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h5 id="stack-上的数据进行复制" tabindex="-1">Stack 上的数据进行复制 <a class="header-anchor" href="#stack-上的数据进行复制" aria-label="Permalink to &quot;Stack 上的数据进行复制&quot;">​</a></h5><ul><li>Copy 这个 trait（特质） 在编译器中，如果一个类型 impl 了 Copy trait，意味着任何时候，我们可以通过简单的内存拷贝(C 语言的按位拷贝 memcpy)实现该类型的复制，而不会产生任何问题。有点像注解。</li><li>Copy trait，用于像整数这样完全存放在 Stack 上面的类型</li><li>所有需要分配内存的都不是 Copy trait</li><li>一些拥有 Copy trait 的类型： <ul><li>所有整数类型</li><li>bool</li><li>char</li><li>所有浮点类型</li><li>元组（Tuple），如果里面所有字段都是 Copy 的，那这个元组是 <ul><li>（i32,i32）是</li><li>（i32，String）不是</li></ul></li></ul></li></ul><h5 id="所有权与函数" tabindex="-1">所有权与函数 <a class="header-anchor" href="#所有权与函数" aria-label="Permalink to &quot;所有权与函数&quot;">​</a></h5><ul><li>在语义上，将值传递给函数和把值赋给变量是类似的</li><li>将值传递给函数将发生移动和复制</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这里声明引用类型，String，</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">take_ownership</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//放入函数，发生了移动</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//声明整型</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        makes_copy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//实际上传入的是a的副本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//a:在Stack中的本来数据被drop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> take_ownership</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(some_string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, some_string);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//s:这里Heap中的数据被drop了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> makes_copy</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(some_number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> u32</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, some_number);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//a:在Stack中的副本数据被drop</span></span></code></pre></div><h5 id="返回值与作用域" tabindex="-1">返回值与作用域 <a class="header-anchor" href="#返回值与作用域" aria-label="Permalink to &quot;返回值与作用域&quot;">​</a></h5><ul><li>函数在返回值的过程中同样也会发生所有权的转移</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> gives_ownership</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //返回值的所有权转移给 s1 发生了移动</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> takes_and_gives_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s2);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//s2 所有权移交给这个方法，然后又移交给s3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> gives_ownership</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> some_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        some_string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> takes_and_gives_back</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(a_string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        a_string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div><ul><li>一个值赋给其他变量时就会发生移动 -当一个包含 Heap 数据的变量离开作用域时，它的值就会被 drop 函数清理，除非数据所有权移动到另一个变量上了</li></ul><h5 id="让函数使用某个值-但不获得所有权" tabindex="-1">让函数使用某个值，但不获得所有权 <a class="header-anchor" href="#让函数使用某个值-但不获得所有权" aria-label="Permalink to &quot;让函数使用某个值，但不获得所有权&quot;">​</a></h5><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (s2, len) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//把s1的所有权移交到，这个方法中的s，然后再返回</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;The length of &#39;{}&#39; is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s2, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">usize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这个length是usize类型，基础类型，存储在Stack中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    (s, length)</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这里length返回一个副本就可以了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>这种做法，不得不把变量作为参数传入，然后又作为返回值传出，很繁琐</p><p>针对这个场景，Rust 有一个特性，叫做 “引用” （Reference）</p><h2 id="引用和借用" tabindex="-1">引用和借用 <a class="header-anchor" href="#引用和借用" aria-label="Permalink to &quot;引用和借用&quot;">​</a></h2><h3 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;The length of &#39;{}&#39; is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s1, len);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> usize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>参数的类型是 &amp;String 而不是 String</li><li>&amp;符号就表示引用：允许你引用某些值而不取得其所有权</li></ul><p><img src="`+c+`" alt=""></p><ul><li>s 就是个指针指向了 s1 然后再指向 Heap，这就是引用的原理</li></ul><h3 id="借用" tabindex="-1">借用 <a class="header-anchor" href="#借用" aria-label="Permalink to &quot;借用&quot;">​</a></h3><ul><li><p>当一个函数使用引用，而不是一个真实的值作为它的参数，我们就管这个行为叫做借用</p></li><li><p>不可以修改借用的数据</p></li><li><p>和变量一样，引用默认也是不可变的</p></li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;The length of &#39;{}&#39; is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s1, len);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> usize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;,World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这里会报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>那么我们把引用的变为可变的,就不会报错了</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;The length of &#39;{}&#39; is {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s1, len);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> calculate_length</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;mut</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> usize</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;,World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">len</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>重要的限制 <ul><li>在特定作用域内，对某一块数据，只能有一个可变的引用 <ul><li>这样做的好处就是可以在编译时防止数据竞争</li><li>以下三种行为会发生数据竞争： <ul><li>两个或多个指针同时访问一个数据</li><li>至少有一个指针用于写入数据</li><li>没有使用任何的机制来同步对数据的访问</li></ul></li></ul></li><li>不可以同时拥有一个可变引用和一个不变的引用 <ul><li>多个不变的引用是可以的</li></ul></li></ul></li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这里会报错告诉你只能用一个</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}, {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s1, s2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>我们可以通过创建新的作用域，来允许非同时的创建多个可变引用</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//s1 就会在这个作用域存在</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这里是不变引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//这里是可变引用就报错了</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{},{},{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, s1, s2, r);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h4 id="悬垂引用-dangling-references" tabindex="-1">悬垂引用（Dangling References） <a class="header-anchor" href="#悬垂引用-dangling-references" aria-label="Permalink to &quot;悬垂引用（Dangling References）&quot;">​</a></h4><ul><li><p>在具有指针的语言中可能会有一个错误叫做悬垂指针（dangling pointer）</p></li><li><p>悬垂指针</p><ul><li>一个指针引用了内存中的某个地址，而这块内存可能已经释放分配给其他人使用了</li><li>在 Rust 中，编译器可保证引用永远不会处于悬垂状态</li><li>我们尝试创建一个悬垂引用，Rust 会通过一个编译时错误来避免：</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dangle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> dangle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//离开这个方法作用域，s销毁了，而这个方法，返回了s的引用，也就是说，会指向一个已经被释放的内存空间，所以会直接报错</span></span></code></pre></div></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>关于引用，必须满足下列条件之一： <ul><li>一个可以变的引用</li><li>任意数量的不可变引用</li><li>引用必须一直有效（不能指向空内存空间）</li></ul></li></ul><h2 id="切片" tabindex="-1">切片 <a class="header-anchor" href="#切片" aria-label="Permalink to &quot;切片&quot;">​</a></h2><ul><li>Rust 另一种不持有所有权的数据类型：切片（slice）</li></ul><h3 id="字符串切片" tabindex="-1">字符串切片 <a class="header-anchor" href="#字符串切片" aria-label="Permalink to &quot;字符串切片&quot;">​</a></h3><p>字符串切片是指，向字符串中一部分内容的引用</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hello </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> world </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, hello);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, world);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>通过这样的方式进行截取&amp;s[0..5] 表示引用 [ 0, 5 ) 左闭右开，内部数字为引用字符串索引</p><p>s 是字符串索引，world 是切片，切片从 6 开始</p><h3 id="切片的语法糖" tabindex="-1">切片的语法糖 <a class="header-anchor" href="#切片的语法糖" aria-label="Permalink to &quot;切片的语法糖&quot;">​</a></h3><ul><li>语法糖 <ul><li>不改变结果的情况下，让代码更简洁</li><li>如果切片的开始是第一个索引，可以忽略不写</li><li>如果切片的结束是最后一个索引，也就是字符串的长度的话，也可以忽略不写</li></ul></li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hello </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//原本写法 &amp;s[0..5]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> world </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//原本写法 &amp;s[6..11]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//引用整个字符串，直接忽略开始结束索引</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, hello);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, world);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="字符串字面值-str-和-string" tabindex="-1">字符串字面值&amp;str 和 String <a class="header-anchor" href="#字符串字面值-str-和-string" aria-label="Permalink to &quot;字符串字面值&amp;str 和 String&quot;">​</a></h3><ul><li><p>Rust 将字符串分为两种：</p><ul><li>&amp;str 固定长度字符串（也称字符串字面量）</li><li>String ：可以随意改变其长度。</li><li>两者区别 <ul><li>&amp;str 字符串类型存储于栈上，str 字符串序列存储于程序的静态只读数据段或者堆内存中。由两部分组成： <ul><li>指向字符串序列的指针</li><li>记录长度的值</li></ul></li><li>String 类型本质是一个成员变量为 Vec 类型的结构体，所以它是直接将字符内容存放于堆中的。由三部分组成 <ul><li>执行堆中字节序列的指针（as_ptr 方法）</li><li>记录堆中字节序列的字节长度（len 方法）</li><li>堆分配的容量（capacity 方法）</li></ul></li></ul></li></ul></li><li><p>几种声明方式</p></li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//1.第一种方式：通过 String 的 new 创建一个空的字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> my_str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//不能有字符变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">my_str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;my_str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //为这个空的字符串变量使用 push_str 方法添加一个值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//2.第二种方式 通过String的from创建一个字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> my_str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;my_str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">my_str2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//3.第三种方式，直接书写字符串字面量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> my_str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;my_str3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // &amp;str</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//4.第四种方式  通过to_string把字面量变成一个字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> my_str4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;my_str&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">my_str4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//5.第五种方式  通过with_capacity创建一个带有预先分配的初始缓冲区的空字符串</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//如果已知String的最终大小，String::with_capacity则应首选。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> my_str5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">with_capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">my_str5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">push_str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;my_str5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{} , {} , {} , {} , {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> , my_str , my_str2 , my_str3 , my_str4 , my_str5);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="将字符串切片作为参数传递" tabindex="-1">将字符串切片作为参数传递 <a class="header-anchor" href="#将字符串切片作为参数传递" aria-label="Permalink to &quot;将字符串切片作为参数传递&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> first_word</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//原本传入 String 类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//  有经验的 Rust 开发者会采用 &amp;str 作为参数类型，因为这样就可以同时接收 String 和 &amp;str 类型了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 变为这样</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> first_word</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span></code></pre></div><ul><li>使用字符串切片，直接调用该函数</li><li>使用 String，可以创建一个完整的 String 切片来调用该函数</li><li>让我们的 API 更加通用，而且不会损失功能</li></ul><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> first_word</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">str1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> first_word</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str2);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;{}, {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, x, y)</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //输出结果 Hello, hello</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> first_word</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">as_bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (i, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">item) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">iter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">enumerate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> b&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">s[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="其它类型的切片" tabindex="-1">其它类型的切片 <a class="header-anchor" href="#其它类型的切片" aria-label="Permalink to &quot;其它类型的切片&quot;">​</a></h3><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> slice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//对数组切片，从索引为1到索引为3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span></code></pre></div>`,90);function m(s,b,q,v,f,_){const h=k,t=e("ClientOnly");return n(),r("div",null,[u,d(t,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),D(h,{key:0,article:s.$frontmatter},null,8,["article"])):F("",!0)]}),_:1}),E])}const w=p(B,[["render",m]]);export{P as __pageData,w as default};
