import{_ as k}from"./chunks/ArticleMetadata.k6FzNjuZ.js";import{_ as t,p as e,a as r,v as d,C as g,e as n,y as A,f as y,o as l,q as c,s as D}from"./chunks/framework.x10tvMrD.js";import"./chunks/theme.tiQ3bKBi.js";import"./chunks/index.DkoCfqcs.js";const T=JSON.parse('{"title":"Vue3源码解析-watch原理","description":"","frontmatter":{"title":"Vue3源码解析-watch原理","aside":true,"editLink":false,"lastUpdated":false,"showComment":false},"headers":[],"relativePath":"notes/vue3/01-Vue3源码解析/03-watch原理.md","filePath":"notes/vue3/01-Vue3源码解析/03-watch原理.md","lastUpdated":1706692809000}'),C={name:"notes/vue3/01-Vue3源码解析/03-watch原理.md"},F=n("h1",{id:"vue3-中的-watch",tabindex:"-1"},[A("Vue3 中的 watch "),n("a",{class:"header-anchor",href:"#vue3-中的-watch","aria-label":'Permalink to "Vue3 中的 watch"'},"​")],-1),o=y(`<h2 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h2><ul><li>本质就是观测一个响应式数据</li><li>当数据发生变化时通知并执行相应的回调函数</li><li>watch 的实现本质就是利用了 <ul><li>effect</li><li>options.scheduler</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// watch 函数接收两个参数，source 是响应式数据，cb 是回调函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  effect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 触发读取操作，从而建立联系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> source.foo,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      scheduler</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 当数据变化时，调用回调函数 cb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        cb</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>上述代码中，source 是响应式数据，cb 是回调函数。</p><ul><li>如果副作用函数中存在 scheduler 选项 <ul><li>则当响应式数据发生变化时，会触发 scheduler 函数执行，而不是直接触发副作用函数执行。</li><li>scheduler 调度函数就相当于是一个回调函数，而 watch 的实现就是利用了这点。</li></ul></li></ul><h2 id="watch-的函数签名" tabindex="-1">watch 的函数签名 <a class="header-anchor" href="#watch-的函数签名" aria-label="Permalink to &quot;watch 的函数签名&quot;">​</a></h2><h3 id="侦听多个源" tabindex="-1">侦听多个源 <a class="header-anchor" href="#侦听多个源" aria-label="Permalink to &quot;侦听多个源&quot;">​</a></h3><ul><li>侦听的数据源可以是一个数组，如下面的函数签名所示：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// packages/runtime-core/src/apiWatch.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 数据源是一个数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// overload: array of multiple sources + cb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MultiWatchSources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">sources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MapSources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MapSources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchStopHandle</span></span></code></pre></div><ul><li>也可以使用数组同时侦听多个源，如下面的函数签名所示：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// packages/runtime-core/src/apiWatch.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 使用数组同时侦听多个源</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// overload: multiple sources w/ \`as const\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// watch([foo, bar] as const, () =&gt; {})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// somehow [...T] breaks when the type is readonly</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MultiWatchSources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MapSources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">MapSources</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchStopHandle</span></span></code></pre></div><h3 id="侦听单一源" tabindex="-1">侦听单一源 <a class="header-anchor" href="#侦听单一源" aria-label="Permalink to &quot;侦听单一源&quot;">​</a></h3><ul><li>侦听的数据源是一个 ref 类型的数据 或者是一个具有返回值的 getter 函数，如下面的函数签名所示：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// packages/runtime-core/src/apiWatch.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 数据源是一个 ref 类型的数据 或者是一个具有返回值的 getter 函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// overload: single source + cb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchStopHandle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> ComputedRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span></code></pre></div><ul><li>侦听的数据源是一个响应式的 obj 对象，如下面的函数签名所示：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// packages/runtime-core/src/apiWatch.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 数据源是一个响应式的 obj 对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// overload: watching reactive object w/ cb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchStopHandle</span></span></code></pre></div><h2 id="watch-的实现" tabindex="-1">watch 的实现 <a class="header-anchor" href="#watch-的实现" aria-label="Permalink to &quot;watch 的实现&quot;">​</a></h2><h3 id="watch-函数" tabindex="-1">watch 函数 <a class="header-anchor" href="#watch-函数" aria-label="Permalink to &quot;watch 函数&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// packages/runtime-core/src/apiWatch.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// implementation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchStopHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">DEV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cb)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`watch(fn, options?)\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> signature has been moved to a separate </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">API</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">. </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`+</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       \`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Use </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`watchEffect(fn, options?)\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instead. </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`watch\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> now only </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`+</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">       \`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">supports </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`watch(source, cb, options?) signature.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> doWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, cb, options)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li><p>watch 函数接收 3 个参数</p><ul><li>source 侦听的数据源</li><li>cb 回调函数</li><li>options 侦听选项。</li></ul></li><li><p>source 参数</p><ul><li>从 watch 的函数重载中可以知道，当侦听的是单一源时，source 可以是一个 ref 类型的数据，或者是一个具有返回值的 getter 函数，也可以是一个响应式的 obj 对象。当侦听的是多个源时，source 可以是一个数组。</li></ul></li><li><p>cb 参数 在 cb 回调函数中，给开发者提供了最新的 value，旧的 value 以及 onCleanup 函数用与清除副作用。 如下面的类型定义所示：</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">OV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> V</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  oldValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> OV</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">  onCleanup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> OnCleanup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><ul><li>options 参数 options 选项可以控制 watch 的行为，例如通过 options 的选项参数 immediate 来控制 watch 的回调是否立即执行，通过 options 的选项参数来控制 watch 的回调函数是同步执行还是异步执行。options 参数的类型定义如下：</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptionsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> DebuggerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">flush</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;pre&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;post&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;sync&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> WatchOptionsBase</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">immediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Immediate</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">deep</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>options 的类型定义 WatchOptions 继承了 WatchOptionsBase。 <ul><li>watch 的 options 中有 immediate 和 deep 这两个特有的参数</li><li>还可以传递 WatchOptionsBase 中的所有参数以控制副作用执行的行为</li><li>在 watch 的函数体中调用了 doWatch 函数，我们来看看它的实现。</li></ul></li></ul><h3 id="dowatch-函数" tabindex="-1">doWatch 函数 <a class="header-anchor" href="#dowatch-函数" aria-label="Permalink to &quot;doWatch 函数&quot;">​</a></h3><ul><li><p>实际上，无论是 watch 函数，还是 watchEffect 函数，在执行时最终调用的都是 doWatch 函数。</p></li><li><p>doWatch 函数签名</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> doWatch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">source</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchEffect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">cb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchCallback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{ </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">immediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">deep</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">onTrack</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">onTrigger</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> EMPTY_OBJ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> WatchStopHandle</span></span></code></pre></div><ul><li><p>doWatch 的函数签名与 watch 的函数签名基本一致，也是接收三个参数。</p><ul><li>在 doWatch 函数中，为了便于 options 选项的使用，对 options 进行了解构。</li></ul></li><li><p>初始化变量 首先从 component 中获取当前的组件实例，然后分别定义三个变量。其中 getter 是一个函数，它或作为副作用的函数参数传入到副作用函数中。forceTrigger 变量是一个布尔值，用来标识是否需要强制触发副作用函数执行。isMultiSource 变量同样也是一个布尔值，用来标记侦听的数据源是单一源还是以数组形式传入的多个源，初始值为 false，表示侦听的是单一源。</p></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> currentInstance;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 是否需要强制触发副作用函数执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> forceTrigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 侦听的是否是多个源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> isMultiSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><ul><li><p>接下来根据侦听的数据源来初始化这三个变量。</p></li><li><p>侦听的数据源是一个 ref 类型的数据</p><ul><li>当侦听的数据源是一个 ref 类型的数据时 <ul><li>通过返回 source.value 来初始化 getter(如果接收到的数据是 ref 类型的数据，则会获取 value 值)，</li><li>当 getter 函数被触发时，会通过 source.value 获取到实际侦听的数据</li><li>然后通过 isShallow 函数来判断侦听的数据源是否是浅响应</li><li>并将其结果赋值给 forceTrigger，完成 forceTrigger 变量的初始化。</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 侦听的数据源是 ref</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  getter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> source.value;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 判断数据源是否是浅响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  forceTrigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> isShallow</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>侦听的数据源是一个响应式数据 <ul><li>当侦听的数据源是一个响应式数据时 <ul><li>直接返回 source 来初始化 getter ，即 getter 函数被触发时直接返回侦听的数据源。</li><li>由于响应式数据中可能会是一个 object 对象，因此将 deep 设置为 true，在触发 getter 函数时可以递归地读取对象的属性值。</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 侦听的数据源是响应式数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> source</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">deep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>侦听的数据源是一个数组 <ul><li>当侦听的数据源是一个数组，即同时侦听多个源。 <ul><li>此时直接将 isMultiSource 变量设置为 true，表示侦听的是多个源。</li><li>接着通过数组的 some 方法来检测侦听的多个源中是否存在响应式对象，将其结果赋值给 forceTrigger 。</li><li>然后遍历数组，判断每个源的类型，从而完成 getter 函数的初始化。</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 侦听的数据源是一个数组，即同时侦听多个源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">isMultiSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">forceTrigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(isReactive)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 遍历数组，判断每个源的类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isRef</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 侦听的数据源是 ref</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> s.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 侦听的数据源是响应式数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 侦听的数据源是一个具有返回值的 getter 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callWithErrorHandling</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s, instance, ErrorCodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WATCH_GETTER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">DEV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> warnInvalidSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(s)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>侦听的数据源是一个函数 <ul><li>当侦听的数据源是一个具有返回值的 getter 函数时，判断 doWatch 函数的第二个参数 cb 是否有传入。 <ul><li>如果有传入，则处理的是 watch 函数的场景，此时执行 source 函数，将执行结果赋值给 getter 。</li><li>如果没有传入，则处理的是 watchEffect 函数的场景。在该场景下，如果组件实例已经卸载，则直接返回，不执行 source 函数。</li><li>否则就执行 cleanup 清除依赖，然后执行 source 函数，将执行结果赋值给 getter 。</li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">isFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source)) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 处理 watch 和 watchEffect 的场景</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// watch 的第二个参数可以是一个具有返回值的 getter 参数，第二个参数是一个回调函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// watchEffect 的参数是一个 函数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 侦听的数据源是一个具有返回值的 getter 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (cb) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// getter with cb</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 处理的是 watch 的场景</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 执行 source 函数，将执行结果赋值给 getter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">callWithErrorHandling</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(source, instance, ErrorCodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WATCH_GETTER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// no cb -&gt; simple effect</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 没有回调，即为 watchEffect 的场景</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 件实例已经卸载，则不执行，直接返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instance.isUnmounted) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 清除依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (cleanup) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 执行 source 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> callWithAsyncErrorHandling</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">source,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ErrorCodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WATCH_CALLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[onCleanup]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>递归读取响应式数据 <ul><li>如果侦听的数据源是一个响应式数据，需要递归读取响应式数据中的属性值。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 处理的是 watch 的场景</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 递归读取对象的属性值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (cb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> deep) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> baseGetter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> getter;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  getter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> traverse</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">baseGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>doWatch 函数的第二个参数 cb 有传入，说明处理的是 watch 中的场景。 deep 变量为 true ，说明此时侦听的数据源是一个响应式数据，因此需要调用 traverse 函数来递归读取数据源中的每个属性，对其进行监听，从而当任意属性发生变化时都能够触发回调函数执行。</p><ul><li>定义清除副作用函数 <ul><li>声明 cleanup 和 onCleanup 函数</li><li>并在 onCleanup 函数的执行过程中给 cleanup 函数赋值</li><li>当副作用函数执行一些异步的副作用时，这些响应需要在其失效是清除。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 清除副作用函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> cleanup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> onCleanup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> OnCleanup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  cleanup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">onStop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    callWithErrorHandling</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(fn, instance, ErrorCodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WATCH_CLEANUP</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><ul><li>封装 scheduler 调度函数 <ul><li>为了便于控制 watch 的回调函数 cb 的执行时机，需要将 scheduler 调度函数封装为一个独立的 job 函数，</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 将 scheduler 调度函数封装为一个独立的 job 函数，便于在初始化和变更时执行它</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> job</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SchedulerJob</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">effect.active) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// watch</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (cb) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 处理 watch 的场景</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// watch(source, cb)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 执行副作用函数获取新值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> newValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 如果数据源是响应式数据或者需要强制触发副作用函数执行或者新旧值发生了变化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 则执行回调函数，并更新旧值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      deep </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      forceTrigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      (isMultiSource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (newValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">            hasChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(v, (oldValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[])[i])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> hasChanged</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newValue, oldValue)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      (__COMPAT__ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(newValue) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        isCompatEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(DeprecationTypes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WATCH_ARRAY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, instance))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    ) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 当回调再次执行前先清除副作用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // cleanup before running cb again</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (cleanup) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 执行watch 函数的回调函数 cb，将旧值和新值作为回调函数的参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      callWithAsyncErrorHandling</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cb, instance, ErrorCodes.</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">WATCH_CALLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        newValue,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // 首次调用时，将 oldValue 的值设置为 undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // pass undefined as the old value when it&#39;s changed for the first time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        oldValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> INITIAL_WATCHER_VALUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> oldValue,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        onCleanup</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      ])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // 更新旧值，不然下一次会得到错误的旧值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      oldValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> newValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// watchEffect</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 处理 watchEffect 的场景</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li><p>在 job 函数中</p><ul><li>判断回调函数 cb 是否传入 <ul><li>如果有传入，那么是 watch 函数被调用的场景 <ul><li>首先执行副作用函数，将执行结果赋值给 newValue 变量，作为最新的值。</li><li>然后判断需要执行回调函数 cb 的情况 <ul><li>如果侦听的数据源是响应式数据，需要深度侦听，即 deep 为 true</li><li>如果需要强制触发副作用函数执行，即 forceTrigger 为 true</li><li>如果新旧值发生了变化</li><li>只要满足上面三种情况中的其中一种 <ul><li>就需要执行 watch 函数的回调函数 cb。</li></ul></li><li>如果回调函数 cb 是再次执行，在执行之前需要先清除副作用 <ul><li>然后调用 callWithAsyncErrorHandling 函数执行回调函数 cb\`\`</li><li>并将新值 newValue 和旧值 oldValue 传入回调函数 cb 中</li><li>在回调函数 cb 执行后，更新旧值 oldValue，避免在下一次执行回调函数 cb 时获取到错误的旧值。</li></ul></li></ul></li></ul></li><li>否则就是 watchEffect 函数被调用的场景。 <ul><li>则直接执行副作用函数即可。</li></ul></li></ul></li></ul></li><li><p>设置 job 的 allowRecurse 属性</p><ul><li>根据是否传入回调函数 cb，设置 job 函数的 allowRecurse 属性</li><li>这个设置十分重要，它能够让 job 作为侦听器的回调，这样调度器就能知道它允许调用自身。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// important: mark the job as a watcher callback so that scheduler knows</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// it is allowed to self-trigger (#1727)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 打个标记：让调度器任务作为侦听器的回调，这样调度器就能知道允许自己派发更新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">job.allowRecurse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">cb;</span></span></code></pre></div><ul><li>flush 选项指定回调函数的执行时机</li><li>在调用 watch 函数时，可以通过 options 的 flush 选项来指定回调函数的执行时机： <ul><li>当 flush 的值为 sync 时，代表调度器函数是同步执行，此时直接将 job 赋值给 scheduler，这样调度器函数就会直接执行。</li><li>当 flush 的值为 post 时，代表调度函数需要将副作用函数放到一个微任务队列中，并等待 DOM 更新结束后再执行。</li><li>当 flush 的值为 pre 时，即调度器函数默认的执行方式，这时调度器会区分组件是否已经挂载。如果组件未挂载，则先执行一次调度函数，即执行回调函数 cb。在组件挂载之后，将调度函数推入一个优先执行时机的队列中。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 这里处理的是回调函数的执行时机</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> scheduler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> EffectScheduler</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (flush </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;sync&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 同步执行，将 job 直接赋值给调度器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">scheduler </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> job </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // the scheduler function gets called directly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (flush </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 将调度函数 job 添加到微任务队列中执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scheduler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> queuePostRenderEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(job, instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instance.suspense)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// default: &#39;pre&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 调度器函数默认的执行模式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">scheduler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instance.isMounted) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 组件挂载后将 job 推入一个优先执行时机的队列中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">queuePreFlushCb</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(job)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 在 pre 选型中，第一次调用必须发生在组件挂载之前</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 所以这次调用是同步的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">job</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>创建副作用函数</li><li>初始化完 getter 函数和调度器函数 scheduler 后，调用 ReactiveEffect 类来创建一个副作用函数</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 创建一个副作用函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> effect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ReactiveEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(getter, scheduler);</span></span></code></pre></div><ul><li>执行副作用函数 <ul><li>在执行副作用函数之前，首先判断是否传入了回调函数 cb <ul><li>如果有传入，则根据 options 的 immediate 选项来判断是否需要立即执行回调函数 cb <ul><li>如果指定了 immediate 选项，则立即执行 job 函数，即 watch 的回调函数会在 watch 创建时立即执行一次</li><li>否则就手动调用副作用函数，并将返回值作为旧值，赋值给 oldValue。</li></ul></li></ul></li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (cb) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 选项参数 immediate 来指定回调是否需要立即执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (immediate) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 回调函数会在 watch 创建时立即执行一次</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    job</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 手动调用副作用函数，拿到的就是旧值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    oldValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>如果 options 的 flush 选项的值为 post <ul><li>需要将副作用函数放入到微任务队列中，等待组件挂载完成后再执行副作用函数。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (flush </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 在调度器函数中判断 flush 是否为 &#39;post&#39;，如果是，将其放到微任务队列中执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">queuePostRenderEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">effect.run.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(effect),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instance.suspense</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>其余情况都是立即执行副作用函数。</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> else</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 其余情况立即执行副作用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><ul><li>flush: &#39;post&#39; 业务场景： <ul><li>如果需要在 DOM 更新之后执行获取 dom 元素信息的情况。</li><li>在某个组件中，需要在 DOM 更新之后获取某个元素的尺寸信息，然后根据尺寸信息进行一些操作。</li><li>可以使用 watch 监听数据变化，并在回调函数中获取元素尺寸信息，然后在 flush: &#39;post&#39; 的情况下执行操作。</li></ul></li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;myDiv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> setup</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { ref, watch, nextTick } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">() </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Hello, Vue3!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> myDiv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">HTMLDivElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    watch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      message,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      async</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">oldVal</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> myDiv.value.offsetWidth;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> myDiv.value.offsetHeight;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">\`Width: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">width</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}, Height: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">height</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      { flush: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;post&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">}</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#8DDB8C;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&gt;</span></span></code></pre></div><ul><li>使用 watch 函数监听 message 数据的变化</li><li>并在回调函数中使用 nextTick 函数获取元素尺寸信息</li><li>由于添加了 { flush: &#39;post&#39; }，因此回调函数会在下一次 DOM 更新循环结束之后 执行</li><li>这个时候页面完成新的一轮渲染，可以获取到最新的 dom 信息。</li><li>返回匿名函数，停止侦听 <ul><li>doWatch 函数最后返回了一个匿名函数，该函数用以结束数据源的侦听。</li><li>因此在调用 watch 或者 watchEffect 时，可以调用其返回值来来手动结束侦听。</li></ul></li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">effect.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instance.scope) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 返回一个函数，用以显式的结束侦听</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance.scope.effects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, effect)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>watch 的本质就是观测一个响应式数据，当数据发生变化时通知并执行相应的回调函数。</li><li>watch 的实现利用了 effect 和 options.scheduler 选项。</li><li>watch 可以侦听单一源，也可以侦听多个源。 <ul><li>侦听单一源 <ul><li>数据源可以是一个具有返回值的 getter 函数。</li><li>或者是一个 ref 对象。</li><li>也可以是一个响应式的 object 对象。</li></ul></li><li>侦听多个源时，其数据源是一个数组。</li></ul></li><li>根据侦听的数据源的类型 <ul><li>初始化 getter 函数和 scheduler 调度函数，根据这两个函数创建一个副作用函数</li><li>并根据 options 的 immediate 选项以及 flush 选项来指定回调函数和副作用函数的执行时机。 <ul><li>当 immediate 为 true 时，在 watch 创建时会立即执行一次回调函数。</li><li>当 flush 的值为 post 时，scheduler 调度函数和副作用函数都会被添加到微任务队列中，会等待 DOM 更新结束后再执行。</li></ul></li></ul></li></ul>`,62);function B(s,u,E,m,v,b){const h=k,p=e("ClientOnly");return l(),r("div",null,[F,d(p,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),c(h,{key:0,article:s.$frontmatter},null,8,["article"])):D("",!0)]}),_:1}),o])}const _=t(C,[["render",B]]);export{T as __pageData,_ as default};
