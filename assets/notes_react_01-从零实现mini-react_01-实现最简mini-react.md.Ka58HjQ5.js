import{_ as e}from"./chunks/ArticleMetadata.ouxmebTy.js";import{_ as h,p as k,a as r,v as d,C as c,e as n,y as o,f as A,o as t,q as g,s as y}from"./chunks/framework.x10tvMrD.js";import"./chunks/theme.QpXEAifA.js";import"./chunks/index.DkoCfqcs.js";const j=JSON.parse('{"title":"实现最简mini-react","description":"","frontmatter":{"title":"实现最简mini-react","aside":true,"editLink":false,"lastUpdated":false,"showComment":false},"headers":[],"relativePath":"notes/react/01-从零实现mini-react/01-实现最简mini-react.md","filePath":"notes/react/01-从零实现mini-react/01-实现最简mini-react.md","lastUpdated":1712913624000}'),D={name:"notes/react/01-从零实现mini-react/01-实现最简mini-react.md"},C=n("h1",{id:"从零实现mini-react-1-实现最简mini-react",tabindex:"-1"},[o("从零实现mini-react(1)：实现最简mini-react "),n("a",{class:"header-anchor",href:"#从零实现mini-react-1-实现最简mini-react","aria-label":'Permalink to "从零实现mini-react(1)：实现最简mini-react"'},"​")],-1),F=A(`<h2 id="实现过程" tabindex="-1">实现过程 <a class="header-anchor" href="#实现过程" aria-label="Permalink to &quot;实现过程&quot;">​</a></h2><p>通过 dom 原生 api 实现 vdom 转换为真实 dom，在页面中展示出<code>app</code>，拆分为以及几个小步</p><h3 id="_1-原生-api-将app展示在浏览器页面上" tabindex="-1">1. 原生 api 将<code>app</code>展示在浏览器页面上 <a class="header-anchor" href="#_1-原生-api-将app展示在浏览器页面上" aria-label="Permalink to &quot;1. 原生 api 将\`app\`展示在浏览器页面上&quot;">​</a></h3><p>通过调用 dom 原生 api</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dom.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;#root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dom);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> textElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dom.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(textElement);</span></span></code></pre></div><h3 id="_2-使用-vdom-结构定义需要展示的app" tabindex="-1">2. 使用 vdom 结构定义需要展示的<code>app</code> <a class="header-anchor" href="#_2-使用-vdom-结构定义需要展示的app" aria-label="Permalink to &quot;2. 使用 vdom 结构定义需要展示的\`app\`&quot;">​</a></h3><p>这一步需要知道 react 中 vdom 的结构是怎么样的 主要包含几个字段：</p><ul><li>type</li><li>props</li><li>key</li><li>ref</li><li>...</li></ul><p>我们需要使用的就是 type 和 props:</p><ul><li>type 标识当前的节点类型</li><li>props 保存节点上的属性以及在 children 上保存子节点的信息</li></ul><p>然后就可以将 dom 进行 vdom 结构化，再进一步进行 dom 节点的处理</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> textElementVdom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;TEXT_ELEMENT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    nodeValue: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    children: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> domVdom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    id: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    children: [textElementVdom],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (domVdom.type);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dom.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> domVdom.props.id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;#root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dom);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> textElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(textElementVdom.props.nodeValue);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dom.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(textElement);</span></span></code></pre></div><h3 id="_3-编写符合react的api结构实现功能" tabindex="-1">3. 编写符合React的api结构实现功能 <a class="header-anchor" href="#_3-编写符合react的api结构实现功能" aria-label="Permalink to &quot;3. 编写符合React的api结构实现功能&quot;">​</a></h3><p>这一步也需要知道 react 最后提供出来的调用方法是什么，其实在<a href="https://babeljs.io/rep" target="_blank" rel="noreferrer">babel</a>上很清晰的能看出，最终调用的结果是<code>React.createElement </code>这个方法，并且对与文本节点而言，可以单独抽离一个方法<code>createTextNode</code>进行使用； 最终实现一个<code>render</code>方法去执行渲染逻辑</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">nodeValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;TEXT_ELEMENT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    props: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      nodeValue: nodeValue,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      children: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    type,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    props: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">props,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      children: children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">child</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> child </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;string&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(child) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> child;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">el</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">container</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 创建一个dom</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> dom</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    el.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;TEXT_ELEMENT&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      ?</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(el.props.nodeValue)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      :</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (el.type);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将节点上的属性挂载上去</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(el.props).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;children&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      dom[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> el.props[key];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 将children进行递归生成节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  el.props.children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">child</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    render</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(child, dom);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // 挂载节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(dom);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> textElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createTextNode</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, { id: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;aaa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(app, document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;#root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">));</span></span></code></pre></div><h3 id="_4-使用-jsx-写法验证" tabindex="-1">4. 使用 jsx 写法验证 <a class="header-anchor" href="#_4-使用-jsx-写法验证" aria-label="Permalink to &quot;4. 使用 jsx 写法验证&quot;">​</a></h3><p>通过Vite转换功能，将 jsx 转换为 React.createElement的结构，从而进一步验证代码逻辑是否正确</p><h2 id="我学到了什么" tabindex="-1">我学到了什么？ <a class="header-anchor" href="#我学到了什么" aria-label="Permalink to &quot;我学到了什么？&quot;">​</a></h2><ul><li>从零开始实现 React 和 ReactDOM。</li><li>实现 React 的 createElement 和 render 方法封装。</li><li>使用Vite将.jsx文件编译城ECMAScript 模块（ES 模块）。</li><li>接入vitest并编写测试用例，了解toMatchInlineSnapshot的用法。</li><li>认识由繁入简的一种学习方法，有目标，但也要尽量拆解，还有一定要实操，再简单都要实操一遍。</li></ul><h2 id="我遇到了什么问题" tabindex="-1">我遇到了什么问题？ <a class="header-anchor" href="#我遇到了什么问题" aria-label="Permalink to &quot;我遇到了什么问题？&quot;">​</a></h2><ol><li>使用Vite后，jsx代码<code>const div = &lt;div id=&quot;app&quot;&gt;hello&lt;/div&gt;</code>，转成<code>React.createElement()</code>形式的原因？<br></li></ol><ul><li>这是因为使用的vite背后的esbuild具备解析jsx文件的能力，它能够根据配置将jsx转成普通函数的形式，这样就能被浏览器解析。</li><li>esbuild内部是根据配置项来决定用哪个方法，一共有两个配置项jsxFactory和jsxFragmentFactory，vite这里配置的jsxFactory的值为<code>React.createElement</code>。</li></ul><ol start="2"><li><p>/** @jsx CReact.createElement */ 这段注释作用是什么？ 它告诉esbuild当前的jsxFactory要使用CReact.createElement方法。</p></li><li><p>为什么jsx的文件没有使用到React，但是一定要导入React？</p></li></ol><ul><li>本质上来说JSX是React.createElement(component, props, ...children)方法的语法糖。</li><li>主要是编译前后的差异原因，因为esbuild会将jsx编译成React.createElement普通函数的形式，所以需要引入 React，防止找不到 React 引起报错。</li><li>写组件时，每个地方都要引入React确实很烦，新版React中，esbuild提供了自动引入React的方法autoimport配置。<a href="#在vite项目中自动引入react">在Vite中如何自动引入React？</a></li></ul><ol start="4"><li></li></ol><h2 id="在vite项目中自动引入react" tabindex="-1">在Vite项目中自动引入React <a class="header-anchor" href="#在vite项目中自动引入react" aria-label="Permalink to &quot;在Vite项目中自动引入React&quot;">​</a></h2><p>在Vite中自动引入React的方法主要是通过配置Vite的插件或者配置选项来实现。Vite官方提供了一个插件@vitejs/plugin-react，用于支持React项目的开发。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> install @vitejs/plugin-react react react-dom</span></span></code></pre></div><p>然后，在Vite的配置文件中,引入并使用插件：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// vite.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;vite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> react </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;@vitejs/plugin-react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  plugins: [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">react</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">()]</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">})</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>这样配置后，Vite将自动处理.jsx和.tsx文件中的React代码，包括自动引入React、JSX转换等功能。</p>`,31);function B(s,E,m,u,q,b){const l=e,p=k("ClientOnly");return t(),r("div",null,[C,d(p,null,{default:c(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),g(l,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),F])}const V=h(D,[["render",B]]);export{j as __pageData,V as default};
