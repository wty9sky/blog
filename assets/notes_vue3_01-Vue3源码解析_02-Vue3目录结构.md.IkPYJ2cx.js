import{_ as s,a as n,o as a,f as p}from"./chunks/framework.x10tvMrD.js";const h=JSON.parse('{"title":"Vue3源码解析-目录结构","description":"","frontmatter":{"title":"Vue3源码解析-目录结构","aside":true,"editLink":false,"lastUpdated":false,"showComment":false,"showDate":false},"headers":[],"relativePath":"notes/vue3/01-Vue3源码解析/02-Vue3目录结构.md","filePath":"notes/vue3/01-Vue3源码解析/02-Vue3目录结构.md","lastUpdated":1706692809000}'),e={name:"notes/vue3/01-Vue3源码解析/02-Vue3目录结构.md"},l=p(`<p>Vue3 源码解读-目录结构</p><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><p>clone 源代码到本地后，在终端执行 tree -aI &quot;.git*|.vscode&quot; -C -L 2 获取目录结构。</p><blockquote><p>tree: 这是调用 tree 程序的命令，它以图形方式显示目录结构。<br> a: 显示所有文件和目录，包括以点（.）开头的隐藏文件。<br> I &quot;.git*|.vscode&quot;: 忽略列表，不显示与提供的模式匹配的文件或目录。在这个例子中，它会忽略所有以 .git 开头的文件和目录，以及 .vscode 目录。<br> C: 在输出中启用颜色，以区分不同类型的文件。<br> L 2: 限制目录树的显示深度为 2 层。<br></p></blockquote><p>得到如下目录结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>├── .eslintrc.cjs // eslint 代码风格检查工具的配置文件</span></span>
<span class="line"><span>├── .prettierignore // Pretttier 格式化工具忽略文件的配置文件</span></span>
<span class="line"><span>├── .prettierrc // Pretttier 格式化工具配置文件</span></span>
<span class="line"><span>├── BACKERS.md // 支持者列表</span></span>
<span class="line"><span>├── CHANGELOG.md // 代码版本变更日志</span></span>
<span class="line"><span>├── LICENSE // 软件许可证，vue3 遵循 The MIT License (MIT)协议</span></span>
<span class="line"><span>├── README.md // 本项目说明</span></span>
<span class="line"><span>├── SECURITY.md // 安全相关信息说明</span></span>
<span class="line"><span>├── changelogs // 存放版本变更日志的文件夹</span></span>
<span class="line"><span>│ ├── CHANGELOG-3.0.md</span></span>
<span class="line"><span>│ ├── CHANGELOG-3.1.md</span></span>
<span class="line"><span>│ └── CHANGELOG-3.2.md</span></span>
<span class="line"><span>├── netlify.toml // Netlify 部署工具的配置文件</span></span>
<span class="line"><span>├── package.json // 项目依赖和脚本的配置文件</span></span>
<span class="line"><span>├── packages</span></span>
<span class="line"><span>│ ├── compiler-core // 编译器核心，独立于平台</span></span>
<span class="line"><span>│ ├── compiler-dom // 针对浏览器的 DOM 模板编译器</span></span>
<span class="line"><span>│ ├── compiler-sfc // 单文件组件(.vue)编译器的实现</span></span>
<span class="line"><span>│ ├── compiler-ssr // 服务端渲染编译器的实现</span></span>
<span class="line"><span>│ ├── dts-test // TypeScript 类型声明测试</span></span>
<span class="line"><span>│ ├── global.d.ts // 全局 TypeScript 类型声明文件</span></span>
<span class="line"><span>│ ├── reactivity // 响应式系统的实现</span></span>
<span class="line"><span>│ ├── reactivity-transform // 实验性代码，会在 3.4 中从 Vue 核心中删除</span></span>
<span class="line"><span>│ ├── runtime-core // 运行时核心实例相关代码</span></span>
<span class="line"><span>│ ├── runtime-dom // 针对浏览器的运行时实现</span></span>
<span class="line"><span>│ ├── runtime-test // 运行时测试相关代码</span></span>
<span class="line"><span>│ ├── server-renderer // 服务端渲染的实现</span></span>
<span class="line"><span>│ ├── sfc-playground // 单文件组件在线调试器</span></span>
<span class="line"><span>│ ├── shared // package 之间共享的工具库</span></span>
<span class="line"><span>│ ├── template-explorer // 模板代码在线编译器</span></span>
<span class="line"><span>│ ├── vue // vue 编译后 dist 产物，不同场景的引入文件</span></span>
<span class="line"><span>│ └── vue-compat // 兼容旧版 API 的代码</span></span>
<span class="line"><span>├── pnpm-lock.yaml // pnpm 包管理器的依赖锁定文件</span></span>
<span class="line"><span>├── pnpm-workspace.yaml // pnpm 包管理器的工作区配置文件</span></span>
<span class="line"><span>├── rollup.config.js // Rollup 打包工具的配置文件</span></span>
<span class="line"><span>├── rollup.dts.config.js // Rollup 打包工具用于生成 TypeScript 类型声明文件的配置文件</span></span>
<span class="line"><span>├── scripts // 存放脚本文件的文件夹</span></span>
<span class="line"><span>│ ├── aliases.js</span></span>
<span class="line"><span>│ ├── build.js</span></span>
<span class="line"><span>│ ├── const-enum.js</span></span>
<span class="line"><span>│ ├── dev.js</span></span>
<span class="line"><span>│ ├── pre-dev-sfc.js</span></span>
<span class="line"><span>│ ├── release.js</span></span>
<span class="line"><span>│ ├── setupVitest.ts</span></span>
<span class="line"><span>│ ├── size-report.ts</span></span>
<span class="line"><span>│ ├── usage-size.ts</span></span>
<span class="line"><span>│ ├── utils.js</span></span>
<span class="line"><span>│ └── verifyCommit.js</span></span>
<span class="line"><span>├── tsconfig.build.json // 用于编译打包后的代码的 TypeScript 配置文件</span></span>
<span class="line"><span>├── tsconfig.json // 项目 TypeScript 配置文件</span></span>
<span class="line"><span>├── vitest.config.ts // Vitest 测试工具的基础配置文件</span></span>
<span class="line"><span>├── vitest.e2e.config.ts // Vite 测试工具的端到端测试配置文件</span></span>
<span class="line"><span>└── vitest.unit.config.ts // Vite 构建工具的单元测试配置文件</span></span></code></pre></div><h2 id="模块依赖关系图" tabindex="-1">模块依赖关系图 <a class="header-anchor" href="#模块依赖关系图" aria-label="Permalink to &quot;模块依赖关系图&quot;">​</a></h2><p>Vue3 源码都放在 packages 目录下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span>├── packages</span></span>
<span class="line"><span>│ ├── compiler-core // 编译器核心，独立于平台</span></span>
<span class="line"><span>│ ├── compiler-dom // 针对浏览器的 DOM 模板编译器</span></span>
<span class="line"><span>│ ├── compiler-sfc // 单文件组件(.vue)编译器的实现</span></span>
<span class="line"><span>│ ├── compiler-ssr // 服务端渲染编译器的实现</span></span>
<span class="line"><span>│ ├── dts-test // TypeScript 类型声明测试</span></span>
<span class="line"><span>│ ├── global.d.ts // 全局 TypeScript 类型声明文件</span></span>
<span class="line"><span>│ ├── reactivity // 响应式系统的实现</span></span>
<span class="line"><span>│ ├── reactivity-transform // 实验性代码，会在 3.4 中从 Vue 核心中删除</span></span>
<span class="line"><span>│ ├── runtime-core // 运行时核心实例相关代码</span></span>
<span class="line"><span>│ ├── runtime-dom // 针对浏览器的运行时实现</span></span>
<span class="line"><span>│ ├── runtime-test // 运行时测试相关代码</span></span>
<span class="line"><span>│ ├── server-renderer // 服务端渲染的实现</span></span>
<span class="line"><span>│ ├── sfc-playground // 单文件组件在线调试器</span></span>
<span class="line"><span>│ ├── shared // package 之间共享的工具库</span></span>
<span class="line"><span>│ ├── template-explorer // 模板代码在线编译器</span></span>
<span class="line"><span>│ ├── vue // vue 编译后 dist 产物，不同场景的引入文件</span></span>
<span class="line"><span>│ └── vue-compat // 兼容旧版 API 的代码</span></span></code></pre></div><h2 id="版本构建" tabindex="-1">版本构建 <a class="header-anchor" href="#版本构建" aria-label="Permalink to &quot;版本构建&quot;">​</a></h2><p>可以通过以下命令进行构建，构建出 Vue3 所有的版本 npm run build</p><p>构建好的文件在目录: core\\packages\\vue\\dist，生成的文件有:</p><ul><li>cjs（用于服务端渲染） <ul><li>vue.cjs.js</li><li>vue.cjs.prod.js（生产版，代码进行了压缩）</li></ul></li><li>global（用于浏览器 script 标签导入，导入之后会增加一个全局的 Vue 对象） <ul><li>vue.global.js</li><li>vue.global.prod.js（生产版，代码进行了压缩，包含编译器）</li><li>vue.runtime.global.js</li><li>vue.runtime.global.prod.js（生产版，代码进行了压缩）</li></ul></li><li>browser（用于支持 ES 6 Modules 浏览器 script 标签中 type 为 module 的情况下导入） <ul><li>vue.esm-browser.js</li><li>vue.esm-browser.prod.js（生产版，代码进行了压缩，包含编译器）</li><li>vue.runtime.esm-browser.js</li><li>vue.runtime.esm-browser.prod.js（生产版，代码进行了压缩）</li></ul></li><li>bundler（这两个版本没有打包所有的代码，只会打包使用的代码，需要配合打包工具来使用，会 让 Vue 体积更小） <ul><li>vue.esm-bundler.js</li><li>vue.runtime.esm-bundler.js</li></ul></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>Vue3 的源码采用 pnpm 实现 monorepo 管理的方式，这种方式可以将不同的功能模块分开管理，使得代码更加结构化和可维护。好处如下：</li><li>模块化: 代码按功能划分成不同的模块，便于管理和维护。</li><li>清晰的职责划分: 每个模块有明确的功能和职责，使得代码更加清晰和易于理解。</li><li>可维护性: 模块化的代码结构有助于定位问题和快速开发新功能。</li><li>可重用性: 独立的模块可以在不同的环境或项目中重用。</li><li>易于测试: 模块化的结构使得编写和运行单元测试更加容易。</li><li>优化打包: 通过模块化，现代打包工具可以更好地进行树摇（tree-shaking）等优化，减少最终构建的体积。</li><li>TypeScript 支持: Vue 3 使用 TypeScript 编写，模块化有助于提供类型安全和更好的开发体验。</li></ul>`,15),i=[l];function t(c,r,o,u,d,m){return a(),n("div",null,i)}const g=s(e,[["render",t]]);export{h as __pageData,g as default};
