import{_ as k}from"./chunks/ArticleMetadata.cPzzb7bB.js";import{_ as e,p as r,a as d,v as g,C as o,e as i,y,f as t,o as h,q as D,s as c}from"./chunks/framework.x10tvMrD.js";import"./chunks/theme.UEaahfx-.js";import"./chunks/index.DkoCfqcs.js";const M=JSON.parse('{"title":"Package&Module","description":"","frontmatter":{"title":"Package&Module","aside":true,"editLink":false,"lastUpdated":false,"showComment":false,"showDate":false,"date":"2023-12-31T19:56:35.000Z"},"headers":[],"relativePath":"notes/rust/01-Rust基础/04-Package&Module.md","filePath":"notes/rust/01-Rust基础/04-Package&Module.md","lastUpdated":1706692809000}'),A={name:"notes/rust/01-Rust基础/04-Package&Module.md"},F=i("h1",{id:"package-crate-module",tabindex:"-1"},[y("Package，Crate，Module "),i("a",{class:"header-anchor",href:"#package-crate-module","aria-label":'Permalink to "Package，Crate，Module"'},"​")],-1),C=t(`<h2 id="代码组织" tabindex="-1">代码组织 <a class="header-anchor" href="#代码组织" aria-label="Permalink to &quot;代码组织&quot;">​</a></h2><ul><li>目前为止我们都是在一个文件中编写的，主要是为了方便学习 Rust 语言的语法和概念。</li><li>对于一个工程来讲，组织代码是十分重要的。</li><li>通过对相关功能进行分组和划分不同功能的代码，你可以清楚在哪里可以找到实现了特定功能的代码，以及在哪里可以改变一个功能的工作方式。</li></ul><h2 id="模块系统" tabindex="-1">模块系统 <a class="header-anchor" href="#模块系统" aria-label="Permalink to &quot;模块系统&quot;">​</a></h2><ul><li>Package（包）： <ul><li>Cargo 的特性，让你构建、测试、共享 Crate</li></ul></li><li>Crate（箱）： <ul><li>一个模块树（当你要编译时，你要编译的那个文件就叫 crate），它可以编译生成一个 二进制文件 或 多个库文件</li></ul></li><li>Module（模块）、use： <ul><li>让你控制代码的组织、作用域、私有路径</li></ul></li><li>Path（路径）： <ul><li>为 struct、function、module 等项命名的方式</li></ul></li></ul><h3 id="package-与-crate" tabindex="-1">Package 与 Crate <a class="header-anchor" href="#package-与-crate" aria-label="Permalink to &quot;Package 与 Crate&quot;">​</a></h3><ul><li>Crate 的类型有两种： <ul><li>binary crate（二进制）编译后产生二进制文件的源文件就叫 binary crate</li><li>library crate（库）编译后产生二进制文件的源文件就叫 library crate</li></ul></li><li>Crate Root（Crate 的根）：是源代码文件</li></ul><p>Rust 编译器从这里开始，如果里面含有 mod 声明，那么模块文件的内容将在编译之前被插入 crate 文件的相应声明处</p><ul><li>一个 Package： <ul><li>包含一个 Cargo.toml，它描述了如何构建这些 Crates</li><li>只能包含 0-1 个 library crate</li><li>可以包含任意数量的 binary crate</li><li>但至少包含一个 crate （library 或 binary）</li></ul></li></ul><h3 id="cargo-的惯例" tabindex="-1">Cargo 的惯例 <a class="header-anchor" href="#cargo-的惯例" aria-label="Permalink to &quot;Cargo 的惯例&quot;">​</a></h3><p>一个例子：</p><p>我们创建一个新的项目（一个项目就是一个包）</p><p>cargo new my-project1 官方文档：src/main.rs ，是一个与包同名的 binary crate 的 crate 根</p><p>解释：src/main.rs 被 Cargo 传递给编译器 rustc 编译后，产生与包同名的二进制文件</p><p>cargo new --lib my-project2 官方文档：src/lib.rs，是与包同名的 library crate 的 crate 根</p><p>解释：src/lib.rs 被 Cargo 传递给编译器 rustc 编译后，产生与包同名的库文件</p><p>Cargo 会默认把这个文件作为根</p><p>如果一个 Package 同时包含 src/main.rs 和 src/lib.rs 那就说明它有一个 binary crate 一个 library crate 一个 Package 有多个 binary crate 的情况下 文件要放在 src/bin 下 每个文件都是单独的 binary crate</p><h3 id="定义-module-来控制作用域和私有性" tabindex="-1">定义 Module 来控制作用域和私有性 <a class="header-anchor" href="#定义-module-来控制作用域和私有性" aria-label="Permalink to &quot;定义 Module 来控制作用域和私有性&quot;">​</a></h3><p>Module 在一个 crate 内，将代码进行分组 增加可读性，易于复用 public private 建立 Mudule： cargo new --lib module 在 lib.rs 文件中写入 module</p><p>我们定义一个模块，是以 mod 关键字为起始，然后指定模块的名字（本例中叫做 front_of_house），并且用花括号包围模块的主体。在模块内，我们还可以定义其他的模块，就像本例中的 hosting 和 serving 模块。模块还可以保存一些定义的其他项，比如结构体、枚举、常量、特性、或者函数。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> seat_at_table</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> serving</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> take_order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> server_order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> take_payment</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在前面我们提到了，src/main.rs 和 src/lib.rs 叫做 crate 根。之所以这样叫它们的原因是，这两个文件的内容都是一个从名为 crate 的模块作为根的 crate 模块结构，称为 模块树（module tree）。这个就是 lib.rs 的模块树</p><p>crate └── front_of_house ├── hosting │ ├── add_to_waitlist │ └── seat_at_table └── serving ├── take_order ├── serve_order └── take_payment</p><h3 id="路径-path" tabindex="-1">路径 PATH <a class="header-anchor" href="#路径-path" aria-label="Permalink to &quot;路径 PATH&quot;">​</a></h3><p>为了在 Rust 的模块中找到某个条目，需要使用路径 路径的两周形式 绝对路径：从 crate root 开始，使用 crate 名 或 字面值 crate 相对路径：从当前模块开始，使用 self 、super 或当前模块的标识符 路径至少由一个标识符组成，标识符之间使用 :: 如果定义的部分和使用的部分总是一起移动，用相对路径，可以独立拆解出来，用绝对路径</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1111&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//绝对路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//相对路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>会报错 module hosting is private</p><p>为什么 crate 和 front_of_house 不报错而是从 hosting 开始呢?</p><p>因为 fn main 和 crate, front_of_house 一样都是根节点，根节点之间访问无论私有公有</p><p>能放入 mod 内部中的一切都是默认是私有的，要把改为共有 pub</p><p>额外知识点 父级模块无法访问子模块中的条目 子模块可以使用所有祖先模块中的条目 公有是 pub</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;1111&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">    front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>super 的用法</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> serve_order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> back_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> fix_incorrect_order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">cook_order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">super</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">serve_order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> cook_order</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>用 super 表示所在代码块的父级，</p><p>也就是 fix_incorrect_order 的父级 mod back_of_house,然后在这个目录下去找到 serve_order 方法</p><p>pub struct pub 放在 struct 前： struct 是公共的 struct 中的字段默认是私有的</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> back_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Breakfast</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//公有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//私有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>pub enum pub 放在 enum 前面 enum 是公共的 enum 的变体也都是公共的</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> back_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Appetizer</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Soup</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Salad</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="use-关键字" tabindex="-1">use 关键字 <a class="header-anchor" href="#use-关键字" aria-label="Permalink to &quot;use 关键字&quot;">​</a></h3><p>可以使用 use 关键字将路径导入到作用域内 仍然遵守私有性规则</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hosting;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hosting;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> //相对路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//相当于 在这里定义了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>函数：将函数的父级模块引入作用域是常用做法 下面这种做法可以，但并不是习惯方式。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">add_to_waitlist;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">，</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">，其他：指定完整路径（指定到本身）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">collections</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> HashMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//直接指定到方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>有一种情况两个不同的类，下面有同名的方法，我们不能指定本身，要加上父级路径</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">fmt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">io;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> f1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> fmt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//会报错因为没有返回值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> f2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//会报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span></code></pre></div><h3 id="as" tabindex="-1">as <a class="header-anchor" href="#as" aria-label="Permalink to &quot;as&quot;">​</a></h3><p>我们有另外一种做法 as</p><p>as 关键字可以为引入的路径指定本地的别名</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">fmt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IoResult</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> f1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> f2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> IoResult</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span></code></pre></div><p>使用 pub use 重新导出名称</p><p>使用 use 将路径（名称）导入到作用域内后，该名称在此作用域内是私有的 可以将条目引入作用域 该条目可以被外部代码引入到它们的作用域</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hosting;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>意思就是，use 引入的模块，同一个文件是公有的，但是别的文件访问是私有的，解决这个问题只需要在 use 前面加一个 pub 就可以了</p><p>现在 eat_at_restaurant 函数可以在其作用域中调用 hosting::add_to_waitlist，外部代码也可以使用这个路径。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hosting;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//像这样</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><h3 id="使用外部包" tabindex="-1">使用外部包 <a class="header-anchor" href="#使用外部包" aria-label="Permalink to &quot;使用外部包&quot;">​</a></h3><p>Cargo.toml 文件添加依赖的包</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[dependencies]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">rand </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;0.5.5&quot;</span></span></code></pre></div><p>use 将特定条目引入作用域 标准库（std）也被当作外部包，但是不需要修改 dependencies 来包含它</p><h3 id="使用嵌套路径清理大量的-use-语句" tabindex="-1">使用嵌套路径清理大量的 use 语句 <a class="header-anchor" href="#使用嵌套路径清理大量的-use-语句" aria-label="Permalink to &quot;使用嵌套路径清理大量的 use 语句&quot;">​</a></h3>`,62),u=i("p",{路径差异的部分:""},"如果使用同一个包或模块下的多个条目 可以使用嵌套路径，在同一行内将上述条目进行引入 路径相同的部分 : :",-1),B=t(`<div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cmp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Ordering</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">io;</span></span></code></pre></div><p>变为</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">cmp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Ordering</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, io};</span></span></code></pre></div><p>特殊情况：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">io;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>变为</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> std</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">io</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">Write</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">};</span></span></code></pre></div><h3 id="通配符" tabindex="-1">通配符 <a class="header-anchor" href="#通配符" aria-label="Permalink to &quot;通配符&quot;">​</a></h3><p>我么可以使用 * 把路径中所有的公共条目都引入到作用域</p><p>把这个路径下的所有都引入了</p><p>use std::collections::*; 谨慎使用</p><p>应用场景： 测试：将所有被测试代码引入 tests 模块 有时被用于预导入（prelude）模块</p><h3 id="将模块内容移动到其他文件" tabindex="-1">将模块内容移动到其他文件 <a class="header-anchor" href="#将模块内容移动到其他文件" aria-label="Permalink to &quot;将模块内容移动到其他文件&quot;">​</a></h3><p>模块定义时，如果模块名后边是 &quot; ; &quot; ，而不是代码块 Rust 会从与模块同名的文件中加载内容 模块树的结构不会变化 两层分离 初始内容（ lib.rs 文件 ）</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hosting;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>新建 front_of_house.rs 文件</p><p>在 lib.rs 文件中</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//从 front_of_house 文件引入</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hosting;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>在 front_of_house.rs 文件中</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div><p>三层分离 如果想把，hosting 里面的内容再次独立出来 新建一个 front_of_house 的文件 ，里面写上 hosting.rs</p><p>hosting.rs 内容</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {}</span></span></code></pre></div><p>front_of_house 内容</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> hosting</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div><p>lib.rs 内容</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">mod</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> front_of_house</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">use</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> crate::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">front_of_house</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hosting;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> eat_at_restaurant</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">hosting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add_to_waitlist</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div>`,27);function _(s,m,b,E,f,v){const l=k,p=r("ClientOnly");return h(),d("div",null,[F,g(p,null,{default:o(()=>{var a,n;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((n=s.$frontmatter)==null?void 0:n.showArticleMetadata)??!0)?(h(),D(l,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),C,u,B])}const R=e(A,[["render",_]]);export{M as __pageData,R as default};
