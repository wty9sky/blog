import{_ as n}from"./chunks/ArticleMetadata.RYJePU6T.js";import{_ as s,p as u,a as h,v as c,C as d,e as r,y as _,f as p,o as l,q as m,s as b}from"./chunks/framework.x10tvMrD.js";import"./chunks/theme.BGzeuo1A.js";import"./chunks/index.w40geAFS.js";const $=JSON.parse('{"title":"牡丹江海浪飞机场综合平台","description":"","frontmatter":{"title":"牡丹江海浪飞机场综合平台","editLink":false,"lastUpdated":true,"showComment":false,"aside":true},"headers":[],"relativePath":"projects/02-盛世雪城/01-牡丹江海浪飞机场平台.md","filePath":"projects/02-盛世雪城/01-牡丹江海浪飞机场平台.md","lastUpdated":1712913896000}'),f={name:"projects/02-盛世雪城/01-牡丹江海浪飞机场平台.md"},V=r("h1",{id:"牡丹江海浪飞机场综合平台",tabindex:"-1"},[_("牡丹江海浪飞机场综合平台 "),r("a",{class:"header-anchor",href:"#牡丹江海浪飞机场综合平台","aria-label":'Permalink to "牡丹江海浪飞机场综合平台"'},"​")],-1),q=p('<h2 id="项目介绍" tabindex="-1">项目介绍 <a class="header-anchor" href="#项目介绍" aria-label="Permalink to &quot;项目介绍&quot;">​</a></h2><h2 id="项目需求" tabindex="-1">项目需求 <a class="header-anchor" href="#项目需求" aria-label="Permalink to &quot;项目需求&quot;">​</a></h2><h2 id="项目难点" tabindex="-1">项目难点 <a class="header-anchor" href="#项目难点" aria-label="Permalink to &quot;项目难点&quot;">​</a></h2><h2 id="开发历程" tabindex="-1">开发历程 <a class="header-anchor" href="#开发历程" aria-label="Permalink to &quot;开发历程&quot;">​</a></h2><h3 id="jquery老项目焕新" tabindex="-1">jQuery老项目焕新 <a class="header-anchor" href="#jquery老项目焕新" aria-label="Permalink to &quot;jQuery老项目焕新&quot;">​</a></h3><ul><li>开始接到这个需求，以为是彻头彻尾的焕新，但是民航局要求是 <ul><li>在尽可能(80%)不大幅度修改原有代码框架基础上 <ul><li>精简化原有代码</li><li>开发新页面和新功能</li><li>需要兼容IE浏览器</li><li>需要开发Web移动端</li></ul></li></ul></li></ul><p>这个要求也太奇葩了，但是没办法，甲方都是爸爸，所以要思考寻求合理的方案。<br> 首先是精简化原有代码，看了下源码，源码并没有抽离，存在很多重复功能的代码模块，那就把这些重复代码抽离出来，然后再抽离jQuery请求，整合到一起，做一个简单的模块化，这样就可以在开发新页面的时候根据页面功能需求调用这些模块。<br> 然后是开发新页面和新功能，还要兼容IE9以上的浏览器，这样的话，为了保证网站的稳定性，就还是使用jQuery来实现比较好，既然上面已经实现了模块化开发，以后开发新页面和功能的话，直接加一个命令，通过命令生成模版文件，然后再在模版文件上进行开发。<br> 最后是开发Web移动端，这部分因为不需要考虑IE浏览器的兼容，主要是适用于微信公众号，加上Vue开发其实更方便快速，而且不影响原有jQuery代码的运行，所以这部分直接选择使用Vue开发。而之前的模块化开发，其实也是往Vue的方向靠。<br> 以上都做完了，问题来了，Vue新代码和jQuery老项目怎么共存，在访问网站的时候，既能保证jQuery页面正常访问，也能保证在移动端能够访问Vue开发的页面。 既要项目互相隔离，也要保证同路由下能够对不同终端和浏览器进行识别然后访问对应的页面。<br> 实在是想不到什么好办法，焦头烂额啊。<br> 直到我在学习Vue源码的时候，下载了VueCli的源码，然后看源码的时候，想到了VueCli可以解析Vue，再看VueCli的Webpack，而且Vue也是可以多页面，突然有了新的思路。<br> VueCli的Webpack配置文件，可以配置多页面，而且每个页面都可以配置不同的入口文件，这样就可以把老项目和新项目分开，然后通过路由来访问不同的页面。<br></p><p>去敏开源DEMO：<a href="https://github.com/wty9sky/jQueryVue" target="_blank" rel="noreferrer">jQuery与Vue共存Demo源码</a></p><h3 id="管理平台搭建" tabindex="-1">管理平台搭建 <a class="header-anchor" href="#管理平台搭建" aria-label="Permalink to &quot;管理平台搭建&quot;">​</a></h3><h3 id="app开发" tabindex="-1">App开发 <a class="header-anchor" href="#app开发" aria-label="Permalink to &quot;App开发&quot;">​</a></h3><h3 id="敏捷开发" tabindex="-1">敏捷开发 <a class="header-anchor" href="#敏捷开发" aria-label="Permalink to &quot;敏捷开发&quot;">​</a></h3>',11);function k(e,y,j,C,P,x){const o=n,i=u("ClientOnly");return l(),h("div",null,[V,c(i,null,{default:d(()=>{var a,t;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((t=e.$frontmatter)==null?void 0:t.showArticleMetadata)??!0)?(l(),m(o,{key:0,article:e.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),q])}const E=s(f,[["render",k]]);export{$ as __pageData,E as default};
